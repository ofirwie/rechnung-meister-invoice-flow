// Add this after the useState declarations (around line 76)
const [debugLog, setDebugLog] = useState<string[]>([]);
const debugCountRef = useRef({ renders: 0, calcs: 0, memos: 0 });

// Add this helper function
const addDebugLog = (message: string) => {
  if (DEBUG_MODE) {
    const timestamp = new Date().toLocaleTimeString();
    setDebugLog(prev => [...prev.slice(-20), `${timestamp}: ${message}`]);
  }
};

// Update the calculateTotals function to track calls
const calculateTotals = () => {
  if (DEBUG_MODE) {
    debugCountRef.current.calcs++;
    const count = debugCountRef.current.calcs;
    setTimeout(() => {
      addDebugLog(`📊 calculateTotals #${count}, subtotal: ${subtotal}`);
    }, 0);
  }
  
  const subtotal = services
    .filter(service => service.addedToInvoice)
    .reduce((sum, service) => {
      return sum + service.amount;
    }, 0);
    
  return {
    subtotal,
    vatAmount: 0,
    total: subtotal
  };
};

// Add after the component declaration
useEffect(() => {
  if (DEBUG_MODE) {
    debugCountRef.current.renders++;
    addDebugLog(`🔄 RENDER #${debugCountRef.current.renders}`);
  }
});

// Add the debug panel in the JSX (after the main form)
{DEBUG_MODE && (
  <div className="fixed bottom-4 right-4 w-96 max-h-96 bg-black bg-opacity-90 text-green-400 p-4 rounded-lg shadow-xl z-50 font-mono text-xs">
    <div className="flex justify-between items-center mb-2">
      <h3 className="text-yellow-400 font-bold">🐛 DEBUG PANEL</h3>
      <button 
        onClick={() => setDebugLog([])}
        className="text-red-400 hover:text-red-300 px-2 py-1"
      >
        Clear
      </button>
    </div>
    <div className="overflow-y-auto max-h-64 space-y-1 bg-gray-900 p-2 rounded">
      {debugLog.length === 0 ? (
        <p className="text-gray-400">Waiting for events...</p>
      ) : (
        debugLog.map((log, i) => (
          <div key={i} className="text-xs">
            {log}
          </div>
        ))
      )}
    </div>
    <div className="mt-2 pt-2 border-t border-gray-700 text-xs">
      <p>Renders: {debugCountRef.current.renders}</p>
      <p>Calc calls: {debugCountRef.current.calcs}</p>
      <p>Services: {services.length}</p>
      <p>Subtotal: €{totals.subtotal.toFixed(2)}</p>
    </div>
  </div>
)}
EOF < /dev/null
